import UIKit
import CoreLocation
import PromiseKit

final class SplashScreenPresenter {

    // MARK: - Properties
    weak private var view: SplashScreenView?
    var interactor: SplashScreenInteractorInput?
    private let router: SplashScreenWireframeInterface
    private var refSelf: SplashScreenPresenter?
//    private var remoteNotificationsListStatus: RemoteNotificationsStatus?

    // MARK: - Initialization and deinitialization -
    init(
        interface: SplashScreenView,
        interactor: SplashScreenInteractorInput?,
        router: SplashScreenWireframeInterface
    ) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.interactor?.fetchFirebaseAPI()
        refSelf = self
    }
}

// MARK: - SplashScreenPresenterInterface -
extension SplashScreenPresenter: SplashScreenPresenterInterface {

    func viewDidLoad() {}
    
    func viewWillAppear() {
        interactor?.fetchFirebaseAPI()
        interactor?.fetchIPInfo()
    }
}

// MARK: - SplashScreenInteractorOutput -
extension SplashScreenPresenter: SplashScreenInteractorOutput {

    func fetchedFirebaseAPI(firebaseModel: FirebaseModel) {
        delay(3) { [weak self] in
            self?.processNavigation()
        }
    }

    func fetchedFirebaseAPI(error: Error) {
        delay(3) { [weak self] in
            self?.processNavigation()
        }
    }
    
//    func fetchedRemoteNotificationsStatus(with status: RemoteNotificationsStatus?) {
//        guard remoteNotificationsListStatus != nil, AppSettings.isActivated else {
//            interactor?.registerForPushNotificationsList()
//            return
//        }
//        if remoteNotificationsListStatus != nil, remoteNotificationsListStatus != status {
//            status != .denied ? interactor?.registerForPushNotificationsList() : interactor?.unregisterForPushNotificationsList()
//            return
//        }
//        remoteNotificationsListStatus = status
//    }
//
//    func registeredForPushNotifications(with status: RemoteNotificationsStatus?) {
//        TapticEngine.impact.feedback(status == .denied || status == .disabled ? .heavy : .medium)
//        remoteNotificationsListStatus = status
//        openApp()
//    }
//
//    func unregisteredForPushNotifications(with status: RemoteNotificationsStatus?) {
//        TapticEngine.impact.feedback(status == .denied || status == .disabled ? .heavy : .medium)
//        remoteNotificationsListStatus = status
//        openApp()
//    }
}

// MARK: - Private methods
extension SplashScreenPresenter {
    
    @objc private func fetchNotificationsListStatus() {
        interactor?.fetchRemoteNotificationsListStatus()
    }
    
    @objc private func processNavigation() {
        let firebaseModel = AppSettings.firebaseModel
        
        if let versionSettings = firebaseModel?.versionSettings,
            firebaseModel?.versionSettings?.versionInfo == .forceUpdate {
            router.navigate(to: .forceUpdate(versionSettings: versionSettings))
            return
        }
        
        // 1. –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É
//        if
//            firebaseModel?.appSettings?.isAutoActivationEnabled == true,
//            firebaseModel?.wvSettings?.isAllowed == true,
//            firebaseModel?.appSettings?.activationRegions.contains("countryCode") == true
//        {
//
//            guard
//                let wvSettings = AppSettings.firebaseModel?.wvSettings,
//                var url = wvSettings.url
//            else {
//                router.navigate(to: .authorizationScreen)
//                return
//            }
//
//            url = prepareURL(url: url)
//            router.navigate(to: AppSettings.isLoggedIn
//                            ? .wvScreen(url: url, webDisplayType: .webView)
//                            : .authorizationScreen)
//            return
//        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–∏–ª—ã
        let countryRestrictions = firebaseModel?.locationRestrictions?.countryRestrictionsByVersions[AppSettings.version] ?? []

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ Firebase
//        if
//            LocationManager.containsRestrictions(countryRestrictions: countryRestrictions),
//            !LocationManager.countryCodeFits(
//                LocationManager.getCountryCode(),
//                countryRestrictions: countryRestrictions
//            )
//        {
//            // 4. –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
//            router.navigate(to: AppSettings.isLoggedIn ? .featureApp : .authorizationScreen)
//            return
//        }
        
        openApp()
    }

    private func verifyRealPromocode(promocode: String) {
//        let isEnabled = AppSettings.firebaseModel?.wvSettings?.isAllowed
//        let isPromocodeExist = AppSettings.firebaseModel?.appSettings?.promo.contains(promocode)
//        if isPromocodeExist == true, isEnabled == true {
//            AppSettings.isActivated = true
//            DeeplinkManager.shared.deeplink = nil
//            interactor?.fetchRemoteNotificationsListStatus()
//        } else {
//            openApp()
//        }
    }
    
    private func prepareURL(url: URL) -> URL {
//        var url = url
//        var urlComponents = URLComponents(string: url.absoluteString)
//        var queryItems: [URLQueryItem] = [.init(name: "app_type", value: "1")]
//
//        if let fcmToken = (UIApplication.shared.delegate as? AppDelegate)?.fcmPushToken {
//            queryItems.append(.init(name: "a_ssid", value: fcmToken))
//        }
//
////        if let mindboxSettings = appConfig.appSpecification.metrics.mindbox {
////            MindboxManager.shared.getDeviceUUID { mindboxUUID in
////                queryItems.append(.init(name: "mb_uuid", value: mindboxUUID))
////            }
////            queryItems.append(.init(name: "app_id", value: mindboxSettings.appId))
////        }
//        urlComponents?.queryItems = queryItems
//        url = urlComponents?.url ?? url
        return url
    }
    
    private func openApp() {
        print("\n[SplashScreenPresenter] openApp() called.")
        print("[SplashScreenPresenter] Current AppSettings.isTrust: \(AppSettings.isTrust)")
        print("[SplashScreenPresenter] Current AppSettings.isAgreement: \(AppSettings.isAgreement)")
        
        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ Firebase
        guard let wvSettings = AppSettings.firebaseModel?.wvSettings,
              let url = wvSettings.authUrl else {
            // –ï—Å–ª–∏ –Ω–µ—Ç URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —ç–∫—Ä–∞–Ω
            print("‚ö†Ô∏è [SplashScreenPresenter] –ù–µ –ø–æ–ª—É—á–µ–Ω URL –∏–∑ Firebase, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            router.navigate(to: .authorizationScreen)
            return
        }
        
        print("üîó [SplashScreenPresenter] –ü–æ–ª—É—á–µ–Ω URL –∏–∑ Firebase: \(url.absoluteString)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if AppSettings.isAgreement {
            // –ï—Å–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º FeatureApp
            print("üì± [SplashScreenPresenter] Agreement accepted, navigating to feature app")
            router.navigate(to: .featureApp)
            return
        } else if AppSettings.isTrust {
            // –ï—Å–ª–∏ trust —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º webView
            print("üåê [SplashScreenPresenter] Trust established, navigating to wvScreen with URL: \(url)")
            router.navigate(to: .wvScreen(url: url, webDisplayType: wvSettings.webDisplayType))
            return
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        print("üîë [SplashScreenPresenter] Defaulting to authorization screen")
        router.navigate(to: .authorizationScreen)
    }
}
