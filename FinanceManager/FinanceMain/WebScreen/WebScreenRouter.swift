import UIKit
import SwiftUI
import SafariServices
import FinanceManager

class WebScreenRouter {
    // MARK: - Properties
    weak var viewController: UIViewController?
    private let financeStore = FinanceStore()
}

// MARK: - PayScreenWireframeInterface -
extension WebScreenRouter: WebScreenWireframeInterface {
//
    func navigate(to option: WebScreenNavigationOption) {
        let vc: UIViewController
        let presentationType: PresentationType
        
        switch option {
        case .redirect(let url):
            UIApplication.shared.open(url)
            back()
            return
        case .featureApp:
            AppSettings.isLoggedIn = true
            let mainTabView = ForceCompactView(content: MainTabView(financeStore: financeStore))
                .environmentObject(financeStore)
            let hostingController = UIHostingController(rootView: mainTabView)
            UIApplication.shared.windows.first?.rootViewController = hostingController
            return
        case .back:
            back()
            return
        case .dismiss:
            viewController?.dismiss()
            return
        case .webView:
            AppSettings.isLoggedIn = true
            
            // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ Firebase
            guard let url = AppSettings.firebaseModel?.wvSettings?.authUrl else {
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL –≤ Firebase –¥–ª—è WebView")
                return
            }
            
            print("üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º URL —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é webView: \(url)")
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            presentationType = .modal
            let data = WebScreenData(url: url, htmlString: nil, info: nil, onViewDidDisappear: nil)
            let newVC = WebScreenConfigurator.createModule(with: data)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–∫—Ä–∞–Ω
            UIApplication.shared.windows.filter { $0.isKeyWindow }.first?.rootViewController = newVC
            return
        }

        vc.changeModalPresentationStyle()

        switch presentationType {
        case .modal:
            viewController?.present(vc, animated: false)
        case .push:
            viewController?.navigationController?.pushViewController(vc, animated: true)
        }
    }
    
    private func back() {
        if viewController?.isModal == true {
            viewController?.dismiss(animated: true)
        } else {
            viewController?.navigationController?.popViewController(animated: true)
        }
    }
}

struct ForceCompactView<Content: View>: View {
    let content: Content
    
    var body: some View {
        content
            // –ó–∞—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë –≤–Ω—É—Ç—Ä–∏ –¥—É–º–∞—Ç—å, —á—Ç–æ —à–∏—Ä–∏–Ω–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è
            .environment(\.horizontalSizeClass, .compact)
    }
}
