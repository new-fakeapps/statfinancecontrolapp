import UIKit
import WebKit
import CollectionKit

class WebScreenViewController: UIViewController {
    
    // MARK: - Properties
    var presenter: WebScreenPresenterInterface?
    
    private let progressBar = TimerProgressBar()
    private var isSideMenuRevealable: Bool = false
    private var lastError: Error?
    
    private lazy var webView: WKWebView = {
        let preferences = WKPreferences()
        preferences.javaScriptEnabled = true
        preferences.javaScriptCanOpenWindowsAutomatically = true
        
        let configuration = WKWebViewConfiguration()
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []
        configuration.preferences = preferences
        
        let contentController = WKUserContentController()
        contentController.add(self, name: "iosListener")
        configuration.userContentController = contentController

        if #available(iOS 10, *) {
            configuration.processPool = AppSettings.wkProcessPool
        }
        
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.navigationDelegate = self
        webView.uiDelegate = self
        
        if let defaultUserAgent = webView.value(forKey: "userAgent") as? String {
            webView.customUserAgent = defaultUserAgent + " native"
        }
        webView.allowsBackForwardNavigationGestures = true
        return webView
    }()
    
    private lazy var backButton: UIBarButtonItem = {
        let backButton = UIBarButtonItem(
            image: UIImage(named: "backIcon"),
            style: .done,
            target: self,
            action: #selector(btnBackAction)
        )
        backButton.tintColor = .white
        return backButton
    }()
    
    private lazy var refreshButton: UIBarButtonItem = {
        let refreshButton = UIBarButtonItem(
            image: UIImage(named: "refreshItemIcon"),
            style: .plain,
            target: self,
            action: #selector(btnReloadAction)
        )
        refreshButton.tintColor = .white
        return refreshButton
    }()
    
    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        configureUI()
        configureJavaScriptLogging()
        presenter?.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter?.viewWillAppear()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        presenter?.viewDidDisappear()
        webView.navigationDelegate = nil
        webView.uiDelegate = nil
    }
    
    private func configureJavaScriptLogging() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º JavaScript –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let script = """
        console.log = function(message) {
            window.webkit.messageHandlers.iosListener.postMessage('JS_LOG: ' + message);
        };
        console.error = function(message) {
            window.webkit.messageHandlers.iosListener.postMessage('JS_ERROR: ' + message);
        };
        """
        let userScript = WKUserScript(source: script, injectionTime: .atDocumentStart, forMainFrameOnly: false)
        webView.configuration.userContentController.addUserScript(userScript)
    }
}

// MARK: - UIConfiguration
extension WebScreenViewController {
    
    func setupLayout() {
        view.addSubview(webView)
        webView.fillSuperview()
    }
    
    func configureUI() {
        navigationItem.rightBarButtonItems = [refreshButton]

        webView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            webView.topAnchor.constraint(equalTo: view.topAnchor),
            webView.leftAnchor.constraint(equalTo: view.leftAnchor),
            webView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            webView.rightAnchor.constraint(equalTo: view.rightAnchor)
        ])
        
        webView.addSubview(progressBar)
    }
}

// MARK: - PayScreenView
extension WebScreenViewController: WebScreenView {
    
    func display(url: URL) {
        print("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º URL: \(url.absoluteString)")
        var urlRequest = URLRequest(url: url)
        urlRequest.timeoutInterval = 60.0 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
        urlRequest.cachePolicy = .reloadIgnoringLocalCacheData // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        if let authUrl = AppSettings.firebaseModel?.wvSettings?.authUrl, authUrl == url {
            navigationItem.leftBarButtonItems = []
        } else {
            navigationItem.leftBarButtonItems = [backButton]
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        lastError = nil
        webView.load(urlRequest)
    }
    
    func display(htmlString: String, baseURL: URL?) {
        print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å –±–∞–∑–æ–≤—ã–º URL: \(baseURL?.absoluteString ?? "nil")")
        webView.loadHTMLString(htmlString, baseURL: baseURL)
    }
    
    func stopLoading() {
        print("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        webView.stopLoading()
    }
    
    func sideMenuRevealable(isActive: Bool) {
        isSideMenuRevealable = isActive
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    func reloadAfterError() {
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        webView.reload()
    }
}

// MARK: - Actions
extension WebScreenViewController {

    @objc
    private func didRefreshWebView() {
        presenter?.viewDidLoad()
    }
    
    @objc
    private func btnBackAction(_ sender: UIButton) {
        webView.goBack()
    }
    
    @objc
    private func btnReloadAction(_ sender: Any) {
        print("üîÑ –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
        webView.reload()
    }
}

// MARK: - WKNavigationDelegate
extension WebScreenViewController: WKNavigationDelegate {
    
    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        print("üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏: \(webView.url?.absoluteString ?? "unknown")")
        progressBar.startLoading(frequency: 0.1)
        presenter?.didStartProvisionalNavigation(url: webView.url)
    }
    
    func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
        print("üì∂ –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: \(webView.url?.absoluteString ?? "unknown")")
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \(webView.url?.absoluteString ?? "unknown")")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ
        webView.evaluateJavaScript("document.body.innerHTML.length") { (result, error) in
            if let contentLength = result as? Int {
                print("üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: \(contentLength)")
                if contentLength < 10 {
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π")
                }
            }
        }
        
        presenter?.didFinishLoad()
        progressBar.stopLoading()
    }
    
    func webView(
        _ webView: WKWebView,
        decidePolicyFor navigationAction: WKNavigationAction,
        decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
    ) {
        
        let url = navigationAction.request.url
        print("üß≠ –†–µ—à–µ–Ω–∏–µ –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: —Ç–∏–ø=\(navigationAction.navigationType.rawValue), URL=\(url?.absoluteString ?? "nil")")

        if let mainHostURL = AppSettings.firebaseModel?.wvSettings?.authUrl?.host,
           let currentHostURL = navigationAction.request.url?.host,
           currentHostURL.contains(mainHostURL) {
            presenter?.didSetPreviousPage(url: navigationAction.request.url)
        }
        
        let handler = presenter?.shouldStartLoadWith(url: url) ?? .allow
        print(handler == .allow ? "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" : "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ")
        return decisionHandler(handler)
    }
    
    func webView(
        _ webView: WKWebView,
        didFailProvisionalNavigation navigation: WKNavigation!,
        withError error: Error
    ) {
        let nsError = error as NSError
        lastError = error
        
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –∫–æ–¥=\(nsError.code), –æ–ø–∏—Å–∞–Ω–∏–µ=\(error.localizedDescription)")
        if let urlString = nsError.userInfo[NSURLErrorFailingURLStringErrorKey] as? String {
            print("üîó URL —Å –æ—à–∏–±–∫–æ–π: \(urlString)")
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if nsError.domain == NSURLErrorDomain {
            switch nsError.code {
            case NSURLErrorTimedOut:
                print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å timeoutInterval")
            case NSURLErrorCannotFindHost, NSURLErrorCannotConnectToHost:
                print("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–æ—Å—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")
            case NSURLErrorNetworkConnectionLost:
                print("üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏")
            case NSURLErrorNotConnectedToInternet:
                print("üåê –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            default:
                print("üß© –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ URL: \(nsError.code)")
            }
        }
        
        presenter?.didFailLoadWithError(error, url: nsError.userInfo[NSURLErrorFailingURLStringErrorKey] as? String)
        progressBar.stopLoading()
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if nsError.domain == NSURLErrorDomain &&
           (nsError.code == NSURLErrorTimedOut || nsError.code == NSURLErrorNetworkConnectionLost) {
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) { [weak self] in
                if self?.webView.isLoading == false {
                    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏")
                    self?.webView.reload()
                }
            }
        }
    }
    
    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        print("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)")
        lastError = error
        progressBar.stopLoading()
    }
    
    func webView(_ webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!) {
        print("‚Ü™Ô∏è –ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: \(webView.url?.absoluteString ?? "unknown")")
        presenter?.didReceiveServerRedirectForProvisionalNavigation(url: webView.url)
    }
}

// MARK: - WKUIDelegate
extension WebScreenViewController: WKUIDelegate {
    
    func webView(
        _ webView: WKWebView,
        createWebViewWith configuration: WKWebViewConfiguration,
        for navigationAction: WKNavigationAction,
        windowFeatures: WKWindowFeatures
    ) -> WKWebView? {
        print("üîó –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞: \(navigationAction.request.url?.absoluteString ?? "unknown")")
        if navigationAction.targetFrame == nil {
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ, —Ç.–∫. targetFrame == nil")
            webView.load(navigationAction.request)
        }
        return nil
    }
    
    func webView(_ webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping () -> Void) {
        print("üîî JavaScript Alert: \(message)")
        
        let alertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "OK", style: .default) { _ in
            completionHandler()
        })
        
        present(alertController, animated: true)
    }
    
    func webView(_ webView: WKWebView, runJavaScriptConfirmPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping (Bool) -> Void) {
        print("‚ùì JavaScript Confirm: \(message)")
        
        let alertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "OK", style: .default) { _ in
            completionHandler(true)
        })
        alertController.addAction(UIAlertAction(title: "Cancel", style: .cancel) { _ in
            completionHandler(false)
        })
        
        present(alertController, animated: true)
    }
}

// MARK: - UIScrollViewDelegate
extension WebScreenViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) { }
}

// MARK: - WKScriptMessageHandler
extension WebScreenViewController: WKScriptMessageHandler {
    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        guard message.name == "iosListener" else { return }

        print("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ JS: \(message.body)")

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º JavaScript –ª–æ–≥–∏
        if let body = message.body as? String {
            if body.hasPrefix("JS_LOG:") || body.hasPrefix("JS_ERROR:") {
                return
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç JavaScript
        if let jsonString = message.body as? String,
           let data = jsonString.data(using: .utf8),
           let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {

            if let isTrust = json["is_trust"] as? String, isTrust == "true" {
                print("‚úÖ is_trust = true ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Storage")
                AppSettings.isTrust = true
                
                // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–∞–π—Ç—É —Å–∞–º–æ–º—É —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                // –ù–ï —Ö–∞—Ä–¥–∫–æ–¥–∏–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                print("üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –¥–æ–≤–µ—Ä–∏—è, –æ–∂–∏–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –æ—Ç —Å–∞–π—Ç–∞")
                return
            }

            if let agreement = json["agreement"] as? String, agreement == "accepted" {
                print("üìÑ agreement = accepted ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Storage –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ featureApp")
                AppSettings.isAgreement = true
                presenter?.didReceiveAgreement()
                return
            }
        } else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å message.body:", message.body)
        }
    }
}

