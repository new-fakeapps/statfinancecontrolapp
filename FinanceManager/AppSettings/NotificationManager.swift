import Foundation
import UserNotifications

public class NotificationManager {
    public static let shared = NotificationManager()
    
    private let userDefaults = UserDefaults.standard
    private let notificationCenter = UNUserNotificationCenter.current()
    
    private let reminderSettingKey = "activeReminderSetting"
    
    private init() {}
    
    // MARK: - Permission Handling
    
    public func requestNotificationPermission(completion: @escaping (Bool) -> Void) {
        notificationCenter.getNotificationSettings { settings in
            print("Current notification settings - Authorization status: \(settings.authorizationStatus.rawValue)")
            switch settings.authorizationStatus {
            case .notDetermined:
                print("Requesting notification permission...")
                self.notificationCenter.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
                    if let error = error {
                        print("Error requesting notification permission: \(error)")
                    }
                    print("Notification permission granted: \(granted)")
                    DispatchQueue.main.async {
                        completion(granted)
                    }
                }
            case .authorized, .provisional, .ephemeral:
                print("Notifications already authorized")
                DispatchQueue.main.async {
                    completion(true)
                }
            case .denied:
                print("Notifications are denied")
                DispatchQueue.main.async {
                    completion(false)
                }
            @unknown default:
                print("Unknown notification authorization status")
                DispatchQueue.main.async {
                    completion(false)
                }
            }
        }
    }
    
    // MARK: - Settings Management
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    struct ReminderSetting: Codable {
        let days: Set<Int>
        let time: Date
        
        init(days: Set<Int>, time: Date) {
            self.days = days
            self.time = time
        }
    }
    
    public func saveReminderSettings(days: Set<Int>, time: Date) {
        print("Saving reminder settings - Days: \(days), Time: \(time)")
        
        // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelAllReminders()
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        if days.isEmpty {
            print("üö´ No days selected, notifications cancelled")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        let newSetting = ReminderSetting(days: days, time: time)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if let data = try? JSONEncoder().encode(newSetting) {
            userDefaults.set(data, forKey: reminderSettingKey)
        }
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        scheduleNotifications(for: newSetting)
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    public func getReminderSettings() -> (days: Set<Int>, time: Date?) {
        guard let data = userDefaults.data(forKey: reminderSettingKey),
              let setting = try? JSONDecoder().decode(ReminderSetting.self, from: data) else {
            return ([], nil)
        }
        return (setting.days, setting.time)
    }
    
    // MARK: - Notification Scheduling
    
    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    private func scheduleNotifications(for setting: ReminderSetting) {
        let calendar = Calendar.current
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        let timeComponents = calendar.dateComponents([.hour, .minute], from: setting.time)
        let hour = timeComponents.hour ?? 0
        let minute = timeComponents.minute ?? 0
        
        print("‚è∞ Scheduling notifications for days: \(setting.days), time: \(hour):\(minute)")
        
        for weekday in setting.days {
            // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            var dateComponents = DateComponents()
            dateComponents.hour = hour
            dateComponents.minute = minute
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π
            // –í —Å–∏—Å—Ç–µ–º–µ: 1=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 2=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 7=—Å—É–±–±–æ—Ç–∞
            // –í –Ω–∞—à–µ–º –∫–æ–¥–µ: 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2=–≤—Ç–æ—Ä–Ω–∏–∫, ..., 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            let systemWeekday = weekday == 7 ? 1 : weekday + 1
            dateComponents.weekday = systemWeekday
            
            print("üìÜ Setting notification for weekday: \(weekday) (system: \(systemWeekday)) at \(hour):\(minute)")
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            let content = UNMutableNotificationContent()
            content.title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤"
            content.body = "–ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—é–¥–∂–µ—Ç–µ!"
            content.sound = .default
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            let trigger = UNCalendarNotificationTrigger(
                dateMatching: dateComponents, 
                repeats: true
            )
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if let nextFireDate = trigger.nextTriggerDate() {
                print("üìÖ Next fire date for weekday \(weekday): \(nextFireDate)")
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            let identifier = "financeReminder-day-\(weekday)"
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            let request = UNNotificationRequest(
                identifier: identifier,
                content: content,
                trigger: trigger
            )
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            notificationCenter.add(request) { error in
                if let error = error {
                    print("‚ùå Error scheduling notification: \(error)")
                } else {
                    print("‚úÖ Successfully scheduled notification for weekday \(weekday)")
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        checkAllScheduledNotifications()
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    private func checkAllScheduledNotifications() {
        notificationCenter.getPendingNotificationRequests { requests in
            print("üìä Total scheduled notifications: \(requests.count)")
            for request in requests {
                print("üîî Notification ID: \(request.identifier)")
                
                if let trigger = request.trigger as? UNCalendarNotificationTrigger,
                   let nextDate = trigger.nextTriggerDate() {
                    print("üìÜ \(request.identifier) will fire at: \(nextDate), repeats: \(trigger.repeats)")
                }
                
                if let trigger = request.trigger as? UNTimeIntervalNotificationTrigger,
                   let nextDate = Calendar.current.date(byAdding: .second, value: Int(trigger.timeInterval), to: Date()) {
                    print("‚è±Ô∏è \(request.identifier) will fire at: \(nextDate), repeats: \(trigger.repeats)")
                }
            }
        }
    }
    
    // –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    public func scheduleTestNotification() {
        let content = UNMutableNotificationContent()
        content.title = "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        content.body = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."
        content.sound = .default
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 15, repeats: false)
        
        let request = UNNotificationRequest(
            identifier: "testFinanceNotification",
            content: content,
            trigger: trigger
        )
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("‚ùå Error scheduling test notification: \(error)")
            } else {
                print("‚úÖ Test notification scheduled, will fire in 15 seconds")
            }
        }
    }
    
    // –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    public func cancelAllReminders() {
        print("üßπ Cancelling all pending finance reminders")
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notificationCenter.getPendingNotificationRequests { requests in
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–∞—à–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
            let financeReminderIds = requests
                .filter { $0.identifier.starts(with: "financeReminder") }
                .map { $0.identifier }
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if !financeReminderIds.isEmpty {
                self.notificationCenter.removePendingNotificationRequests(withIdentifiers: financeReminderIds)
                print("üóëÔ∏è Removed \(financeReminderIds.count) finance reminders")
            }
        }
    }
} 

